package com.atguigu.java1;
/*
方法的重写(override)

1.重写：子类继承父类后，可以对父类中同名同参数的方法，进行覆盖操作
2.重写之后，当创建子类对象后，通过子类对象调用父类中同名同参数的方法时，
实际执行的是子类重写父类的方法
3.重写的规定：
        方法的声明：权限修饰符  返回值类型  方法名(形参列表) throws 异常的类型{
                            //方法体
                    }
        子类中的重写的方法，父类中的叫被重写的方法
        1.子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同
        2.子类重写的方法的权限修饰符不小于(>=)父类被重写的方法的权限修饰符
            >特殊情况：子类不能重写父类声明为private的方法
        3.返回值类型
            >父类被重写的方法返回值类型是void，子类重写的返回值类型只能是void
            >父类被重写的方法返回值类型是A类型，子类重写的返回值类型可以是A类型或A的子类
            >父类被重写的方法返回值类型是基本数据类型(double)，子类重写的返回值类型必须是相同的基本数据类型(必须是double)
        4.子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型

        子类和父类的方法要么都声明为非static的(考虑重写)，要么都声明为static的(不是重写)

 */
public class PersonTest {
    public static void main(String[] args) {
        Student s1 = new Student();
        s1.study("软件工程");
        s1.eat();
        s1.walk(2000);
        System.out.println("************");
        Person p1 = new Person();
        p1.eat();
        p1.walk(1000);


    }
}
